name: CI – Build, Scan and Publish

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# Kill superseded runs (saves minutes)
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  MAVEN_OPTS: "-Dmaven.repo.local=${{ github.workspace }}/.m2"
  IMAGE_NAME: garage-app
  REGISTRY_USER: ${{ secrets.DOCKER_USERNAME }}
  REGISTRY: docker.io

###############################################################################
# 1) Build, unit-test + SonarCloud (SAST)
###############################################################################
jobs:
  build-and-scan:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      pull-requests: read
      checks: write
      id-token: write          # future OIDC

    strategy:
      matrix: { java: [17] }

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Set up JDK ${{ matrix.java }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java }}
          distribution: temurin
          cache: maven           # built-in dep cache

      - name: Cache SonarCloud
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar-${{ hashFiles('**/*.xml') }}
          restore-keys: ${{ runner.os }}-sonar-

      - name: Maven verify + Sonar
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mvn -B verify \
              sonar:sonar \
              -Dsonar.token=$SONAR_TOKEN \
              -Dsonar.projectKey=Nrapendra786_garage-management-application \
              -Dsonar.organization=nrapendra786

      - name: Archive built JAR
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: target/*.jar
          retention-days: 1

  ###############################################################################
  # 2) Build,Tag & Push image (needs successful build-and-scan)
  ###############################################################################
  docker:
    needs: build-and-scan
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout (shallow)
        uses: actions/checkout@v4
        with: { fetch-depth: 1 }

      - name: Download Jar artifact
        uses: actions/download-artifact@v4
        with:
          name: app-jar
          path: target

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: ${{ runner.os }}-buildx-

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.REGISTRY_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & push (multi-arch)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.REGISTRY_USER }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY_USER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  ###############################################################################
  # 3) Snyk Security Platform dependency + container scan (waits for image)
  ###############################################################################
  security-snyk:
    needs: docker
    runs-on: ubuntu-latest

    permissions:
      contents: read
      security-events: write   # for SARIF upload

    env:
      SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 1 }

      # 1. Install the CLI (lightweight, language-agnostic)
      - name: Snyk CLI setup
        uses: snyk/actions/setup@master     # official advice :contentReference[oaicite:2]{index=2}
        with:
          snyk-version: 'latest'

      # 2. Open-source / dependency scan
      - name: Snyk OSS test
        run: snyk test --all-sub-projects --severity-threshold=high
        continue-on-error: true             # warn, don’t fail PRs

      # 3. Container image scan
      - name: Snyk container test
        run: |
          snyk container test \
            "$REGISTRY_USER/$IMAGE_NAME:${{ github.sha }}" \
            --file=Dockerfile \
            --severity-threshold=high
        continue-on-error: true

      # 4. Upload SARIF so results show up under “Code-scanning”
      #- name: Upload Snyk report
      #  uses: github/codeql-action/upload-sarif@v3
      #  with:
      #    sarif_file: snyk.sarif             # auto-generated by the CLI
































