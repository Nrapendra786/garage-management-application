name: CI – Build, Scan and Publish

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# Kill superseded runs (saves minutes)
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  MAVEN_OPTS: "-Dmaven.repo.local=${{ github.workspace }}/.m2"
  IMAGE_NAME: garage-app
  REGISTRY_USER: ${{ secrets.DOCKER_USERNAME }}
  REGISTRY: docker.io

###############################################################################
# 1) Build, unit-test + SonarCloud (SAST)
###############################################################################
jobs:
  build-and-scan:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      pull-requests: read
      checks: write
      id-token: write          # future OIDC

    strategy:
      matrix: { java: [17] }

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Set up JDK ${{ matrix.java }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java }}
          distribution: temurin
          cache: maven           # built-in dep cache

      - name: Cache SonarCloud
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar-${{ hashFiles('**/*.xml') }}
          restore-keys: ${{ runner.os }}-sonar-

      - name: Maven verify + Sonar
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mvn -B verify \
              sonar:sonar \
              -Dsonar.token=$SONAR_TOKEN \
              -Dsonar.projectKey=Nrapendra786_garage-management-application \
              -Dsonar.organization=nrapendra786

#      - name: Upload Sonar SARIF
#        if: always()
#        uses: github/codeql-action/upload-sarif@v3
#        with: { sarif_file: target/sonar/report.sarif }

      - name: Archive built JAR
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: target/*.jar
          retention-days: 1

  ###############################################################################
  # 2) Build & push container (needs successful build-and-scan)
  ###############################################################################
  docker:
    needs: build-and-scan
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout (shallow)
        uses: actions/checkout@v4
        with: { fetch-depth: 1 }

      - name: Download Jar artifact
        uses: actions/download-artifact@v4
        with:
          name: app-jar
          path: target

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: ${{ runner.os }}-buildx-

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.REGISTRY_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & push (multi-arch)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.REGISTRY_USER }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY_USER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  ###############################################################################
  # 3) Snyk dependency + container scan (waits for image)
  ###############################################################################
  security-snyk:
    needs: docker
    runs-on: ubuntu-latest

    permissions:
      contents: read
      security-events: write

    env:
      SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 1 }

      # ---------- Dependency / OSS scan ----------
      - name: Snyk Open Source scan
        uses: snyk/actions/maven@v3
        with:
          args: --all-sub-projects --severity-threshold=high
        continue-on-error: true   # warn in PRs, don’t block

      # ---------- Container-layer scan ----------
      - name: Snyk Container scan
        id: snyk-container
        uses: snyk/actions/docker@v3
        with:
          image: ${{ env.REGISTRY_USER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          args: --file=Dockerfile --severity-threshold=high
        continue-on-error: true

      # ---------- Surface results in GitHub UI ----------
#      - name: Upload Snyk SARIF
#        if: always()
#        uses: github/codeql-action/upload-sarif@v3
#        with: { sarif_file: snyk.sarif }














#name: SonarCloud
#on:
#  push:
#    branches:
#      - master
#  pull_request:
#    types: [opened, synchronize, reopened]
#jobs:
#  build:
#    name: Build and analyze
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v3
#        with:
#          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
#      - name: Set up JDK 17
#        uses: actions/setup-java@v3
#        with:
#          java-version: 17
#          distribution: 'zulu' # Alternative distribution options are available.
#      - name: Cache SonarCloud packages
#        uses: actions/cache@v3
#        with:
#          path: ~/.sonar/cache
#          key: ${{ runner.os }}-sonar
#          restore-keys: ${{ runner.os }}-sonar
#      - name: Cache Maven packages
#        uses: actions/cache@v3
#        with:
#          path: ~/.m2
#          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
#          restore-keys: ${{ runner.os }}-m2
#      - name: Build and analyze
#        env:
#          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}  # Needed to get PR information, if any
#        run: mvn -B verify
#      - name: Log in to Docker Hub
#        uses: docker/login-action@v3
#        with:
#          username: ${{ secrets.DOCKER_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_TOKEN }}
#
#      # Set up Docker Build for multi-platform builds
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v3
#
#      - name: Debug File Listing
#        run: ls -la ./  # Adjust path as necessary
#
#      # Build and Tag the Docker image
#      - name: Build Docker Image for garage management application
#        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/garage-app .
#
#      # Push the Docker image to Docker Hub
#      - name: Push Docker Image to Docker Hub
#        run: docker push ${{ secrets.DOCKER_USERNAME }}/garage-app
#
#      # Log out of Docker Hub
#      - name: Log out of Docker Hub
#        run: docker logout
